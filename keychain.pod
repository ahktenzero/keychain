=head1 NAME

keychain - Manager for ssh-agent, gpg-agent and private keys. Compatible with POSIX systems.

=head1 SYNOPSIS

S<keychain [ -hklQqV ] [ --clear --confhost --confallhosts --gpg2 --help --ignore-missing --list>
S<--noask --nocolor --nogui --noinherit --nolock --quick --quiet --ssh-allow-forwarded --systemd --version ]>
S<[ --agents I<list> ] [ --ssh-agent-socket I<list> ] [ --attempts I<num> ]>
S<[ --dir I<dirname> ] [ --host I<name> ] [ --lockwait I<seconds> ]>
S<[ --stop I<which> ] [ --timeout I<minutes> ] [ keys... ]>

=head1 DESCRIPTION

keychain is a manager for ssh-agent, typically run from ~/.bash_profile.  It
allows your shells and cron jobs to easily share a single ssh-agent process,
and ensure any necessary private keys are loaded and available for use. By
default, the agent started by keychain is long-running and will continue to
run, even after you have logged out from the system.

Keychain also supports GnuPG 2.1 and later, and will automatically start
gpg-agent and allow ensure GPG keys are cached in memory and available for
use.

Keychain supports most UNIX-like operating systems, including Cygwin.
It works with Bourne-compatible, csh-compatible and fish shells.

=head1 LIFECYCLE

Typically, you configure keychain to run -- and start an agent if one is not
yet running -- when you first log in to a system. Keychain then checks to make
sure your private keys are loaded into the agent. If they are not, you are
prompted for any passphrase necessary to decrypt them, so that they are 
cached in memory and available for use.

When keychain starts ssh-agent, saves the ssh-agent environment variables to
~/.keychain/${HOSTNAME}-sh, so that subsequent logins and non-interactive
shells such as cron jobs can source the file and make passwordless ssh
connections using the cached private keys.

In addition, when keychain runs, it verifies that the key files specified on
the command-line are known to ssh-agent, otherwise it loads them, prompting you
for a password if necessary:

    $ keychain id_rsa id_ed25519 id_drobbins_rsa
    
Typically, private key files are specified by filename only, without path, 
although it is possible to specify an absolute or relative
path to the private key file as well. 

For SSH key pairs, just a private key filename is used,
which is typical usage, keychain will look for the specified private key
files in ~/.ssh, ~/.ssh2, or with the -c/--confhost option, inspect the
~/.ssh/config file and use the IdentityFile option to determine the location of
the private key. Private keys can be symlinks to the actual private key.

For SSH key pairs, associated public key files to exist in the same directory as
the private key files, with a .pub extension.  If the private key is a symlink,
the public key can be found alongside the symlink, or in the same directory as
the symlink target (This capability requires the 'readlink' command to be
available on the system.) As an additional feature, if a private key has an 
extension ".ext", keychain will look for privkey.ext.pub first, and if not found,
will look for privkey.pub.

For GPG key pairs, keychain calls GPG commands which expect them to exist 
in the standard ~/.gnupg directory structure used by GnuPG.

=head1 STARTING

Keychain 2.9.0 and onwards adds support for using gpg-agent's
built-in ssh-agent functionality. In fact, this feature is enabled by default,
which means that by default, only gpg-agent is started if it not yet running,
and it is used for both GPG and SSH agent functionality -- and no ssh-agent
is started at all. Please see the following examples to understand the changes
and how to affect startup behavior.

By default, keychain with no arguments will start a gpg-agent if available,
which will function for both GPG and SSH keys. It is essentially a drop-in
replacement for ssh-agent:

    $ ./keychain
    
      * keychain 2.9.0 ~ http://www.funtoo.org/Funtoo:Keychain
      * Starting gpg-agent for gpg and ssh...

If gpg-agent is not available, then GPG support will be disabled, and keychain
will fall back to ssh-agent and SSH-only support. If you would like to force
the use of ssh-agent specifically, you can use the '--nosub' option, which
disables "substitutions" (meaning: substituting gpg-agent for ssh-agent):

    $ ./keychain --nosub

      * keychain 2.9.0 ~ http://www.funtoo.org/Funtoo:Keychain
      * Starting ssh-agent...
      * Starting gpg-agent...

This is the default behavior for keychain 2.8.5 and earlier, where two agents
were started.

If you would like to completely disable the use of gpg-agent, even if it is
running and/or available on your system, use the combination of "--agents ssh"
and "--nosub", which disables GPG support and ensures that the official ssh-agent
is the only agent that is started:

    $ ./keychain --nosub --agents ssh

      * keychain 2.9.0 ~ http://www.funtoo.org/Funtoo:Keychain
      * Starting ssh-agent...

=head1 SOCKETS AND PIDS

Keychain 2.8.5 and earlier used to create a ~/.keychain/localhost-sh-gpg file
for gpg-agent. This file is no longer created, since versions of GPG since 2.1
have moved away from using environment variables and use an official socket
file location as a means to find a running gpg-agent.

In earlier versions of keychain (2.8.5 and earlier), the internal code was
very focused on the process ID of each individual ssh-agent process, and would
display the PID(s) of running ssh-agents. With keychain 2.9.0 and onwards, 
a shift has been made to more prominently display the socket file that is used 
to connect to the agent. This socket file path helps users to understand whether
their ssh-agent functionality is coming from gpg-agent or ssh-agent itself, 
so it is helpful to display this instead of the PID.

Now, in most cases, the path to the socket file will be displayed. The only 
exception to this rule is for an ssh-agent (not gpg-agent) which was detected 
via a SSH_AGENT_PID environment variable, where we follow the "classic" display
of the ssh-agent PID when detected.

Another change with keychain 2.9.0 related to process IDs is that "keychain --stop"
will no longer stop running gpg-agent processes and will handle just official
ssh-agent processes exclusively. To kill gpg-agent, a command like
"killall gpg-agent" can be used. Typically, gpg-agent processes do not need
to be cleaned up in this way, as they will often just be auto-respawned. Best
practice is to use the "--clear" option in place of any situations where you
were killing your gpg-agent processes to achieve the same effect.

=head1 OPTIONS

=over

=item B<--agents> I<list>

Start the agents listed. By default, this is set to "gpg,ssh"
which will result in keychain attempting to start an agent with
SSH support as well as gpg-agent. Note that modern versions of
gpg-agent support SSH, so the default setting will actually
cause just gpg-agent to be run as a daemon, and then used as the
ssh-agent, as well as for GPG. To force use of ssh-agent
specifically, use the "--nosub" option.

=item B<--attempts> I<num>

Try num times to add keys before giving up.  The default is 1.

=item B<--clear>

Delete all of ssh-agent's keys.  Typically this is used in
.bash_profile.  The theory behind this is that keychain should assume
that you are an intruder until proven otherwise.  However, while this
option increases security, it still allows your cron jobs to use your
ssh keys when you're logged out.

=item B<--confhost>

By default, keychain will look for key pairs in the ~/.ssh/ directory.
The --confhost option will inform keychain to look in ~/.ssh/config
for IdentityFile settings defined for the mentioned host (in I<keys>), 
and use these paths to locate keys.

=item B<--confallhosts>

By default, keychain will look for key pairs in the ~/.ssh/ directory.
The --confallhosts option will inform keychain to look in ~/.ssh/config
for IdentityFile settings defined for all hosts, and use these
paths to locate keys to load.

=item B<--confirm>

Keys are subject to interactive confirmation by the SSH_ASKPASS
program before being used for authentication.  See the -c option for
ssh-add(1).

=item B<--absolute>

Any arguments to "--dir" are interpreted to be absolute. The default
behavior is to append "/.keychain" to the argument for backwards
compatibility.

=item B<--dir> I<dirname>

Keychain will use dirname rather than $HOME/.keychain

=item B<--query>

Keychain will print lines in KEY=value format representing the values
which are set by the agents.

=item B<--eval>

Keychain will print lines to be evaluated in the shell on stdout.  It
respects the SHELL environment variable to determine if Bourne shell
or C shell output is expected.

=item B<--env> I<filename>

After parsing options, keychain will load additional environment
settings from "filename".  By default, if "--env" is not given, then
keychain will attempt to load from ~/.keychain/[hostname]-env or
alternatively ~/.keychain/env.  The purpose of this file is to
override settings such as PATH, in case ssh is stored in
a non-standard place.

=item B<--gpg2>

This option changes the default gpg calls to use gpg2 instead to support
distributions such as Ubuntu which has both gpg and gpg2

=item B<-h --help>

Show help that looks remarkably like this man-page. As of 2.6.10,
help is sent to stdout so it can be easily piped to a pager.

=item B<--host> I<name>

Set alternate hostname for creation of pidfiles

=item B<--ignore-missing>

Don't warn if some keys on the command-line can't be found.  This is
useful for situations where you have a shared .bash_profile, but your
keys might not be available on every machine where keychain is run.

=item B<--inherit> I<which> [DEPRECATED]

This is a deprecated and now unsupported option and will print an
error if used (it was removed because it was overly complex, and
didn't make sense for gpg-agent in many cases.)

Consider using the "--noinherit" and "--ssh-allow-forwarded" options
as necessary to get equivalent behavior.

=item B<-l --list>

List signatures of all active SSH keys, and exit, similar to "ssh-add -l".

=item B<-L --list-fp>

List fingerprints of all active SSH keys, and exit, similar to "ssh-add -L".

=item B<--lockwait> I<seconds>

How long to wait for the lock to become available.  Defaults to 5
seconds. Specify a value of zero or more. If the lock cannot be 
acquired within the specified number of seconds, then this keychain
process will forcefully acquire the lock.

=item B<--noask>

This option tells keychain do everything it normally does (ensure
ssh-agent is running, set up the ~/.keychain/[hostname]-{c}sh files)
except that it will not prompt you to add any of the keys you
specified if they haven't yet been added to ssh-agent.

=item B<--nocolor>

Disable color highlighting for non ANSI-compatible terms.

=item B<--nogui>

Don't honor SSH_ASKPASS, if it is set.  This will cause ssh-add to
prompt on the terminal instead of using a graphical program.

=item B<--noinherit>

Don't inherit any agent processes, overriding the default behavior
of inheriting all non-forwarded ssh-agent and any existing
gpg-agent processes.

=item B<--nolock>

Don't attempt to use a lockfile while manipulating files, pids and
keys.

=item B<--nosub>

By default, keychain will use gpg-agent in place of ssh-agent if
gpg-agent is available and supports this functionality. This option
will disable this and any future potential substitution of original
programs, so only ssh-agent will be used for SSH support, etc.

=item B<-k --stop> I<which>

Kill currently running ssh-agent processes and exit immediately. 

Note that previous versions of keychain (2.8.5 and earlier) allowed
killing of gpg-agent as well. This functionality was removed as
ssh-agent and gpg-agent have a bit different design philosophies
and you almost always only have at most one gpg-agent running at
a time. Use "killall gpg-agent" if you really want to kill gpg-agent.

The following values are valid for "which" which controls which
ssh-agents to target:

=over 9

=item all

Kill all ssh-agent processes and quit keychain immediately.  Prior to
keychain-2.5.0, this was the behavior of the bare "--stop" option.

=item others

Kill agent processes other than the ones keychain is providing.  Prior
to keychain-2.5.0, keychain would do this automatically.  The new
behavior requires that you specify it explicitly if you want it.

=item mine

Kill keychain's agent processes, leaving other agents alone.

=back

=item B<--ssh-agent-socket> I<path>

Path for SSH_AUTH_SOCK. If set, ssh-agent will try to bind the socket to
the given path. The older equivalent option "--agent-socket" works
identically and is still supported.

=item B<--ssh-allow-forwarded>

By default, keychain will not use a forwarded ssh-agent connection,
which is a ssh-agent socket created by SSH that has no associated
local process. To permit keychain to use a forwarded ssh-agent
connection, specify this option.

=item B<--systemd>

Inject environment variables into the systemd --user session.

=item B<-Q --quick>

If an ssh-agent process is running then use it.  Don't verify the list
of keys, other than making sure it's non-empty.  This option avoids
locking when possible so that multiple terminals can be opened
simultaneously without waiting on each other.

=item B<-q --quiet>

Only print messages in case of warning, error or required interactivity. As of
version 2.6.10, this also suppresses "Identities added" messages for ssh-agent.

=item B<--timeout> I<minutes>

Allows a timeout to be set for identities added to ssh-agent. When this option
is used with a keychain invocation that starts ssh-agent itself, then keychain
uses the appropriate ssh-agent option to set the default timeout for ssh-agent.
The --timeout option also gets passed to ssh-add invocations, so any keys added
to a running ssh-agent will be individually configured to have the timeout
specified, overriding any ssh-agent default.

Most users can simply use the timeout setting they desire and get the result
they want -- with all identities having the specified timeout, whether added by
keychain or not. More advanced users can use one invocation of keychain to set
the default timeout, and optionally set different timeouts for keys added by
using a subsequent invocation of keychain.

=item B<-V --version>

Show version information.

=back

=head1 EXAMPLES

This snippet should work in most shells to load two ssh keys and one gpg
key:

    eval `keychain --eval id_rsa id_dsa 0123ABCD`

For the fish shell, use the following format:

    if status --is-interactive
        keychain --eval --quiet -Q id_rsa | source
    end

If you have trouble with that in csh:

    setenv SHELL /bin/csh
    eval `keychain --eval id_rsa id_dsa 0123ABCD`

This is equivalent for Bourne shells (including bash and zsh) but
doesn't use keychain's --eval feature:

    keychain id_rsa id_dsa 0123ABCD
    [ -z "$HOSTNAME" ] && HOSTNAME=`uname -n`
    [ -f $HOME/.keychain/$HOSTNAME-sh ] && \
	    . $HOME/.keychain/$HOSTNAME-sh
    [ -f $HOME/.keychain/$HOSTNAME-sh-gpg ] && \
	    . $HOME/.keychain/$HOSTNAME-sh-gpg

This is equivalent for C shell (including tcsh):

    keychain id_rsa id_dsa 0123ABCD
    host=`uname -n`
    if (-f $HOME/.keychain/$host-csh) then
	    source $HOME/.keychain/$host-csh
    endif
    if (-f $HOME/.keychain/$host-csh-gpg) then
	    source $HOME/.keychain/$host-csh-gpg
    endif

To load keychain variables from a script (for example from cron) and
abort unless id_dsa is available:

    # Load keychain variables and check for id_dsa
    [ -z "$HOSTNAME" ] && HOSTNAME=`uname -n`
    . $HOME/.keychain/$HOSTNAME-sh 2>/dev/null
    ssh-add -l 2>/dev/null | grep -q id_dsa || exit 1

=head1 SEE ALSO

L<ssh-agent(1)>, L<gpg-agent(1)>, L<ssh-add(1)>, L<ssh(1)>

=head1 NOTES

Keychain was created and is currently maintained by Daniel Robbins. If you need
to report a bug or request an enhancement, please report it to the GitHub
project page at L<https://github.com/funtoo/keychain>.  For more information
about keychain, please visit L<http://www.funtoo.org/Keychain>.
