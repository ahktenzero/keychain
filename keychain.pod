=head1 NAME

keychain - Manager for ssh-agent, gpg-agent and private keys. Compatible with POSIX systems.

=head1 SYNOPSIS

S<keychain [ -hklQqV ] [ --clear --confhost --confallhosts --gpg2 --help --ignore-missing --list>
S<--noask --nocolor --nogui --noinherit --nolock --quick --quiet --ssh-allow-forwarded --ssh-use-gpg --systemd --version ]>
S<[ --ssh-agent-socket I<list> ] [ --attempts I<num> ]>
S<[ --dir I<dirname> ] [ --host I<name> ] [ --lockwait I<seconds> ]>
S<[ --stop I<which> ] [ --timeout I<minutes> ] [ keys... ]>

=head1 DESCRIPTION

Keychain is a manager for ssh-agent and is typically run from ~/.bash_profile.
It allows your shells and cron jobs to easily share a single ssh-agent process,
and ensure any necessary private keys are loaded and available for use. By
default, the ssh-agent started by keychain is long-running and will continue to
run, even after you have logged out from the system.

Keychain also supports GnuPG 2.1 and later, and will automatically start
gpg-agent if any GPG keys are referenced on the command-line, and will ensure
these credentials are cached in memory and available for use.

Keychain supports most UNIX-like operating systems.
It works with Bourne-compatible, csh-compatible and fish shells.

=head1 LIFECYCLE

Typically, you configure keychain to run when you first log in to a system.
If you are using Bourne shell or bash, you will create a ~/.profile or 
~/.bash_profile file and include the following line in it:

    eval "$(keychain --eval id_rsa)"

Keychain will start ssh-agent if one isn't already running. Keychain then
checks to make sure your private keys (in this example, "id_rsa") are loaded
into the agent. If they are not, you are prompted for any passphrase necessary
to decrypt them, so that they are cached in memory and available for use. 

In addition to printing some user-friendly output to your terminal, keychain
will also output important ssh-agent environment variables, which the "$( )"
(you can also use "` `") captures, and the "eval" evaluates, setting these
variables in your current shell.

These ssh-agent environment variables are also written to
~/.keychain/${HOSTNAME}-sh, so that subsequent logins and non-interactive
shells such as cron jobs can source the file to access the running ssh-agent
and make passwordless ssh connections using the cached private keys --
even when you are logged out.

The key files specified on the command-line will be searched for in the
~/.ssh/ directory, and keychain will expect to find the private key file
with the same name, as well as a '.pub' public key.

Typically, private key files are specified by filename only, without path, 
although it is possible to specify an absolute or relative
path to the private key file as well. Private key files can be symlinks
to the actual key as long as your system has the 'readlink' command available.
More advanced features are available for specifying keys as well -- see the
 --confhost and --confallhosts options for more information.

In addition, if a GPG key is specified and found in ~/.gnupg, a gpg-agent
will be started, and similar steps will be taken to ensure that gpg-agent
has the GPG key loaded and ready for use.

=head1 STREAMLINING AND SIMPLIFICATION

Keychain 2.9.0 has been streamlined, and with this maintenance several
command-line options have been retired as they are not completely necessary.
This simplifies the use of the tool by making it more intuitive to use.
The files created in ~/.keychain have also been cleaned up. This section
details all the important changes.

=head2 PIDFILE CHANGES

"Pidfile" is the nickname for files created in ~/.keychain which can then
be sourced by your scripts to access a running agent.

When using gpg-agent for GPG keys, keychain will no longer create a
~/.keychain/${HOSTNAME}-sh-gpg pidfile. This file is no longer needed
as the canonical GPG socket inside ~/.gnupg/ will be used to detect the
running gpg-agent, which is the modern convention. GnuPG 2.1 and later 
have stopped using environment variables to find the agent. 

=head2 DISPLAY CHANGES

When keychain
uses gpg-agent for either GnuPG or SSH support, then keychain will display
the GnuPG socket file in its output, rather than the PID. Since the socket
file has the ~/.gnupg path in it, this communicates to you that gpg-agent,
not ssh-agent, is active. If you see an integer PID, this means that ssh-agent
is being used.

=head2 SIMPLIFIED OPTIONS

The "--agents" option is now deprecated. Keychain will always ensure an
ssh-agent is running (or if "--ssh-use-gpg" is used, that a gpg-agent is
running to provide ssh-agent functionality -- see STREAMLINED STARTUP, below
.) 

Specifying a GPG key on the command-line will instruct keychain to 
enable gpg-agent functionality automatically. This eliminates an option 
that you need to specify when invoking keychain, and likely will avoid
spawning a daemon you may not be using. Specifying the "--agents" option 
will now display a warning that it's deprecated, but keychain will not
abort.

The "--inherit" option, which took one of four arguments, has been 
deprecated. Keychain's default behavior remains that of "local-once",
and you can influence keychain's behavior via the still-present 
"--noinherit" option as well as the "--ssh-allow-forwarded" options, 
which will allow SSH-forwarded authentication sockets to be used by keychain,
which are disabled by default. If this option is specified, keychain
will print a warning but will not abort.

The "--clear" option is still available, but isn't intended to be a 
"standalone" option, meaning that it is used to perform an initial clearing
of cached keys before loading any specified keys when Keychain is run.

The "--stop" option will now only stop any running ssh-agent processes,
and still supports three possible options: "mine", "others" and "all".
It no longer stops gpg-agent processes, which tend to get auto-respawned
by GPG tools, so killing gpg-agent typically doesn't make a lot of sense.

=head2 BETTER GnuPG INTEGRATION

Behind the scenes, keychain now uses the gpg-connect-agent executable to
restart the agent, get official PID and socket information, etc.

=head2 STREAMLINED STARTUP

By default, keychain will always ensure that an ssh-agent should be started.
It will only start a gpg-agent if a GPG key is referenced on the command-line.

Modern versions of gpg-agent also support the caching of SSH keys, allowing it
to be a drop-in replacement for ssh-agent. With keychain 2.9.0, a new 
"--ssh-use-gpg" option has been added, which when specified will tell keychain
to start gpg-agent in place of ssh-agent. 

Please note that while gpg-agent
provides full compatibility with ssh-agent, you should definitely test systems
if you decide to start using the new "--ssh-use-gpg" option. In particular,
gpg-agent uses its own pinentry program to ask for passphrases, and also will
ask you for a password to encrypt your stored keys. For this reason, consider
this new feature experimental, and use GitHub issues to report back any 
anomalies or suggested improvements for gpg-agent integration.

=head2 CODE OPTIMIZATION

With keychain 2.9.0, there has been significant code cleanup, reducing the size
of the script from 1500 lines to about 1100 lines. In addition, the script is
now fully compliant with L<ShellCheck|https://shellcheck.net>, which will be
hugely helpful to ensure continued POSIX shell compatibility moving forward.

=head1 OPTIONS

=over

=item B<--attempts> I<num>

Try num times to add keys before giving up.  The default is 1.

=item B<--clear>

Ensure that keys for the agents are wiped initially. This is intended
to be used alongside keychain --eval to ensure that only the specified
keys are loaded, and that keychain should assume that you are an intruder
until proven otherwise and force all interactive logins to specify valid
passphrases.  This option increases security and  still allows your 
cron jobs to use your ssh keys when you're logged out.

=item B<--confhost>

By default, keychain will look for key pairs in the ~/.ssh/ directory.
The --confhost option will inform keychain to look in ~/.ssh/config
for IdentityFile settings defined for the mentioned host (in I<keys>), 
and use these paths to locate keys.

=item B<--confallhosts>

By default, keychain will look for key pairs in the ~/.ssh/ directory.
The --confallhosts option will inform keychain to look in ~/.ssh/config
for IdentityFile settings defined for all hosts, and use these
paths to locate keys to load.

=item B<--confirm>

Keys are subject to interactive confirmation by the SSH_ASKPASS
program before being used for authentication.  See the -c option for
ssh-add(1).

=item B<--absolute>

Any arguments to "--dir" are interpreted to be absolute. The default
behavior is to append "/.keychain" to the argument for backwards
compatibility.

=item B<--dir> I<dirname>

Keychain will use dirname rather than $HOME/.keychain

=item B<--query>

Keychain will print lines in KEY=value format representing the values
which are set by the agents.

=item B<--eval>

Keychain will print lines to be evaluated in the shell on stdout.  It
respects the SHELL environment variable to determine if Bourne shell
or C shell output is expected.

=item B<--env> I<filename>

After parsing options, keychain will load additional environment
settings from "filename".  By default, if "--env" is not given, then
keychain will attempt to load from ~/.keychain/[hostname]-env or
alternatively ~/.keychain/env.  The purpose of this file is to
override settings such as PATH, in case ssh is stored in
a non-standard place.

=item B<--gpg2>

This option changes the default gpg calls to use gpg2 instead to support
distributions such as Ubuntu which has both gpg and gpg2

=item B<-h --help>

Show help that looks remarkably like this man-page. As of 2.6.10,
help is sent to stdout so it can be easily piped to a pager.

=item B<--host> I<name>

Set alternate hostname for creation of pidfiles

=item B<--ignore-missing>

Don't warn if some keys on the command-line can't be found.  This is
useful for situations where you have a shared .bash_profile, but your
keys might not be available on every machine where keychain is run.

=item B<--inherit> I<which> [DEPRECATED]

This is a deprecated and now unsupported option and will print an
error if used (it was removed because it was overly complex, and
didn't make sense for gpg-agent in many cases.)

Consider using the "--noinherit" and "--ssh-allow-forwarded" options
as necessary to get equivalent behavior.

=item B<-l --list>

List signatures of all active SSH keys, and exit, similar to "ssh-add -l".

=item B<-L --list-fp>

List fingerprints of all active SSH keys, and exit, similar to "ssh-add -L".

=item B<--lockwait> I<seconds>

How long to wait for the lock to become available.  Defaults to 5
seconds. Specify a value of zero or more. If the lock cannot be 
acquired within the specified number of seconds, then this keychain
process will forcefully acquire the lock.

=item B<--noask>

This option tells keychain do everything it normally does (ensure
ssh-agent is running, set up the ~/.keychain/[hostname]-{c}sh files)
except that it will not prompt you to add any of the keys you
specified if they haven't yet been added to ssh-agent.

=item B<--nocolor>

Disable color highlighting for non ANSI-compatible terms.

=item B<--nogui>

Don't honor SSH_ASKPASS, if it is set.  This will cause ssh-add to
prompt on the terminal instead of using a graphical program.

=item B<--noinherit>

Don't inherit any agent processes, overriding the default behavior
of inheriting all non-forwarded ssh-agent and any existing
gpg-agent processes.

=item B<--nolock>

Don't attempt to use a lockfile while manipulating files, pids and
keys.

=item B<--nosub>

By default, keychain will use gpg-agent in place of ssh-agent if
gpg-agent is available and supports this functionality. This option
will disable this and any future potential substitution of original
programs, so only ssh-agent will be used for SSH support, etc.

=item B<-k --stop> I<which>

Kill currently running ssh-agent processes and exit immediately. 

Note that previous versions of keychain (2.8.5 and earlier) allowed
killing of gpg-agent as well. This functionality was removed as
ssh-agent and gpg-agent have a bit different design philosophies
and you almost always only have at most one gpg-agent running at
a time. Use "killall gpg-agent" if you really want to kill gpg-agent.

The following values are valid for "which" which controls which
ssh-agents to target:

=over 9

=item all

Kill all ssh-agent processes and quit keychain immediately.  Prior to
keychain-2.5.0, this was the behavior of the bare "--stop" option.

=item others

Kill agent processes other than the ones keychain is providing.  Prior
to keychain-2.5.0, keychain would do this automatically.  The new
behavior requires that you specify it explicitly if you want it.

=item mine

Kill keychain's agent processes, leaving other agents alone.

=back

=item B<--ssh-agent-socket> I<path>

Path for SSH_AUTH_SOCK. If set, ssh-agent will try to bind the socket to
the given path. The older equivalent option "--agent-socket" works
identically and is still supported.

=item B<--ssh-allow-forwarded>

By default, keychain will not use a forwarded ssh-agent connection,
which is a ssh-agent socket created by SSH that has no associated
local process. To permit keychain to use a forwarded ssh-agent
connection, specify this option.

=item B<--systemd>

Inject environment variables into the systemd --user session.

=item B<-Q --quick>

If an ssh-agent process is running then use it.  Don't verify the list
of keys, other than making sure it's non-empty.  This option avoids
locking when possible so that multiple terminals can be opened
simultaneously without waiting on each other.

=item B<-q --quiet>

Only print messages in case of warning, error or required interactivity. As of
version 2.6.10, this also suppresses "Identities added" messages for ssh-agent.

=item B<--timeout> I<minutes>

Allows a timeout to be set for identities added to ssh-agent. When this option
is used with a keychain invocation that starts ssh-agent itself, then keychain
uses the appropriate ssh-agent option to set the default timeout for ssh-agent.
The --timeout option also gets passed to ssh-add invocations, so any keys added
to a running ssh-agent will be individually configured to have the timeout
specified, overriding any ssh-agent default.

Most users can simply use the timeout setting they desire and get the result
they want -- with all identities having the specified timeout, whether added by
keychain or not. More advanced users can use one invocation of keychain to set
the default timeout, and optionally set different timeouts for keys added by
using a subsequent invocation of keychain.

=item B<-V --version>

Show version information.

=back

=head1 EXAMPLES

This snippet should work in most shells to load two ssh keys and one gpg
key:

    eval `keychain --eval id_rsa id_dsa 0123ABCD`

For the fish shell, use the following format:

    if status --is-interactive
        keychain --eval --quiet -Q id_rsa | source
    end

If you have trouble with that in csh:

    setenv SHELL /bin/csh
    eval `keychain --eval id_rsa id_dsa 0123ABCD`

This is equivalent for Bourne shells (including bash and zsh) but
doesn't use keychain's --eval feature:

    keychain id_rsa id_dsa 0123ABCD
    [ -z "$HOSTNAME" ] && HOSTNAME=`uname -n`
    [ -f $HOME/.keychain/$HOSTNAME-sh ] && \
	    . $HOME/.keychain/$HOSTNAME-sh
    [ -f $HOME/.keychain/$HOSTNAME-sh-gpg ] && \
	    . $HOME/.keychain/$HOSTNAME-sh-gpg

This is equivalent for C shell (including tcsh):

    keychain id_rsa id_dsa 0123ABCD
    host=`uname -n`
    if (-f $HOME/.keychain/$host-csh) then
	    source $HOME/.keychain/$host-csh
    endif
    if (-f $HOME/.keychain/$host-csh-gpg) then
	    source $HOME/.keychain/$host-csh-gpg
    endif

To load keychain variables from a script (for example from cron) and
abort unless id_dsa is available:

    # Load keychain variables and check for id_dsa
    [ -z "$HOSTNAME" ] && HOSTNAME=`uname -n`
    . $HOME/.keychain/$HOSTNAME-sh 2>/dev/null
    ssh-add -l 2>/dev/null | grep -q id_dsa || exit 1

=head1 SEE ALSO

L<ssh-agent(1)>, L<gpg-agent(1)>, L<ssh-add(1)>, L<ssh(1)>

=head1 NOTES

Keychain was created and is currently maintained by Daniel Robbins. If you need
to report a bug or request an enhancement, please report it to the GitHub
project page at L<https://github.com/funtoo/keychain>.  For more information
about keychain, please visit L<http://www.funtoo.org/Keychain>.
